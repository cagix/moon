
; -> libgdx & clojure => not clojure.gdx (thats the API only)
; => but for 'cdq' we create new abstractions (with only what we need) called 'gdl'

; => the context contains `:gdl/assets` which implements IFn passing a path to get an assets
; or gdl.assets/all-of-type with either :sound or :texture



; => TODO ui is not disposed - this is the VisUI skin and is global state there - so just define it in my context ?
; then it doesn't know its disposed ? omg ...
;:gdl.context/ui-skin (com.kotcrab.vis.ui.VisUI/getSkin)

; TODO tiled-map also dispose if new game state add
; this also if world restarts !!

; => the comments are the problem!

; separate concerns - create -> all the instances - rest of code w. protocols (also tiledmap drawer etc.)
; * draw
; * update

; TODO move to config
; pass only order of [create], [render]
; save in context too
; so can change rendering or updates during the game
; data doc/schema:

;:elapsed-time  "The elapsed in-game-time in seconds (not counting when game is paused)."
;:delta-time "The game logic update delta-time in ms."

; :So actually the big components cannot change
; e.g. each cursor is required !!! -> schema !
; what can change is only the last values, not the keys !

; TODO just 'config' and 'context'

; => this has to become _exactly_ the context like that

{:icon "moon.png"

 :title "Forge"
 :fps 60
 :width 1440
 :height 900

 :log-dispose-lifecycle? true
 :log-resize-lifecycle? false

 ; always assoc :gdl/foo (cdq.foo/create ...) ... !

 :create-fns [cdq.assets/create
              cdq.db/create
              cdq.graphics.batch/create
              cdq.graphics.shape-drawer-texture/create
              cdq.graphics.shape-drawer/create
              cdq.graphics.cursors/create
              cdq.graphics.default-font/create
              cdq.graphics.world-unit-scale/create
              cdq.create/game
              cdq.create/add-new-game-context]

 :cdq.assets/folder "resources/"
 :cdq.db/schema "schema.edn"
 :cdq.db/properties "properties.edn"

 :cdq.graphics.cursors/data {:cursors/bag                   ["bag001"       [0   0]]
                             :cursors/black-x               ["black_x"      [0   0]]
                             :cursors/default               ["default"      [0   0]]
                             :cursors/denied                ["denied"       [16 16]]
                             :cursors/hand-before-grab      ["hand004"      [4  16]]
                             :cursors/hand-before-grab-gray ["hand004_gray" [4  16]]
                             :cursors/hand-grab             ["hand003"      [4  16]]
                             :cursors/move-window           ["move002"      [16 16]]
                             :cursors/no-skill-selected     ["denied003"    [0   0]]
                             :cursors/over-button           ["hand002"      [0   0]]
                             :cursors/sandclock             ["sandclock"    [16 16]]
                             :cursors/skill-not-usable      ["x007"         [0   0]]
                             :cursors/use-skill             ["pointer004"   [0   0]]
                             :cursors/walking               ["walking"      [16 16]]}

 :cdq.graphics.default-font/data {:file "fonts/exocet/films.EXL_____.ttf"
                                  :size 16
                                  :quality-scaling 2}

 :cdq.graphics.world-unit-scale/tile-size 48

 :ui {:skin-scale :x1}
 :graphics {:ui-viewport    {:width 1440 :height 900}
            :world-viewport {:width 1440 :height 900}}
 :world-id :worlds/uf-caves
 :content-grid {:cell-size 16}
 :factions-iterations {:good 15 :evil 5}
 :player-message {:duration-seconds 1.5}
 :render-fns [cdq.render/set-camera-on-player!
              gdl.graphics/clear-screen
              cdq.graphics.tiled-map/render
              cdq.graphics/draw-world-view
              gdl.graphics/draw-stage

              ; updates
              gdl.context/update-stage
              cdq.context/handle-player-input
              cdq.context/update-mouseover-entity
              cdq.context/update-paused-state
              cdq.context/progress-time-if-not-paused
              cdq.context/remove-destroyed-entities  ; do not pause this as for example pickup item, should be destroyed.
              gdl.context/check-camera-controls
              cdq.context/check-ui-key-listeners]
 }


; context:
#_[assets ; no dependencies
   db ; no dependencies
   graphics ; no dependencies
   stage ; requires graphics batch & ui-viewport.
   world] ; requires everything
