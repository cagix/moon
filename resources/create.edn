[
 (cdq.application.create.initial-record/merge-into-record)
 (cdq.application.create.ctx-schema/extend-validation
  [:map {:closed true}
   [:ctx/audio :some]
   [:ctx/editor :some]
   [:ctx/db :some]
   [:ctx/graphics :some]
   [:ctx/world :some]
   ; FIXME same attribute
   [:ctx/input :some]
   [:ctx/controls :some]
   ; FIXME same attribute
   [:ctx/stage :some]
   [:ctx/vis-ui :some]
   [:ctx/ui-actors :some]
   ; FIXME move to graphics/stage?
   [:ctx/mouseover-actor :any]
   [:ctx/ui-mouse-position :some]
   [:ctx/world-mouse-position :some]
   ; TODO find another solution?
   [:ctx/interaction-state :some]])
 (cdq.application.create.requires/do! [com.badlogic.gdx.scenes.scene2d.actor
                                       com.badlogic.gdx.scenes.scene2d.group
                                       com.badlogic.gdx.scenes.scene2d.ui.horizontal-group
                                       com.badlogic.gdx.scenes.scene2d.ui.label
                                       com.badlogic.gdx.scenes.scene2d.ui.stack
                                       com.badlogic.gdx.scenes.scene2d.ui.table
                                       com.badlogic.gdx.scenes.scene2d.ui.widget
                                       com.badlogic.gdx.scenes.scene2d.ui.widget-group
                                       com.badlogic.gdx.scenes.scene2d.ui.window])
 (clojure.core/assoc :ctx/editor #edn/resource "editor.edn")
 (cdq.ui.editor.overview-table/extend-ctx)
 (cdq.ui.editor.window/init!)
 (clojure.core/assoc
  :ctx/mouseover-actor nil
  :ctx/ui-mouse-position true
  :ctx/world-mouse-position true
  :ctx/interaction-state true)
 (clojure.decl/assoc* :ctx/db (cdq.impl.db/create {:schemas "schema.edn"
                                                   :properties "properties.edn"}))
 (cdq.application.create.info/do!)
 (cdq.application.create.txs/do! #edn/resource "txs.edn")
 (cdq.application.create.load-entity-states/do!     #edn/resource "entity_states.edn")
 (cdq.application.create.load-effects/do!           #edn/resource "effects_fn_map.edn")
 (clojure.core/assoc :ctx/controls {:zoom-in :minus
                                    :zoom-out :equals
                                    :unpause-once :p
                                    :unpause-continously :space})
 (cdq.application.create.input/do!)
 (clojure.decl/assoc* :ctx/vis-ui (com.kotcrab.vis.ui.vis-ui/load! {:skin-scale :x1}))
 (cdq.application.create.graphics/do! #edn/resource "graphics.edn")
 (cdq.application.create.stage/do! {:state-var cdq.application/state
                                    :stage-impl com.badlogic.gdx.scenes.scene2d.stage/create})
 (cdq.application.create.set-input-processor/do!)
 (cdq.application.create.audio/do! {:audio-impl cdq.impl.audio/create
                                    :sound-names #edn/resource "sounds.edn"
                                    :path-format "sounds/%s.wav"})
 (clojure.core/dissoc :ctx/files)
 (clojure.core/assoc :ctx/ui-actors #edn/resource "ui_actors.edn")
 (cdq.application.create.reset-stage/do!)
 (cdq.application.create.world/do! #edn/resource "world.edn")
 (cdq.application.create.reset-world/do! (cdq.world-fns.tmx/create {:tmx-file "maps/vampire.tmx"
                                                                    :start-position [32 71]}))
 (cdq.application.create.spawn-player/do!)
 (cdq.application.create.spawn-enemies/do!)
 ]
