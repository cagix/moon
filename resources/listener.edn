{
 :os-settings {:mac [[clojure.lwjgl.system.configuration/set-glfw-library-name! "glfw_async"]
                     [clojure.java.awt/set-taskbar-icon! "icon.png"]]}
 :config {:title "Cyber Dungeon Quest"
          :windowed-mode {:width 1440 :height 900}
          :foreground-fps 60}
 :create [[clojure.decl/assoc* :ctx/gdx (clojure.gdx/state)]
          [cdq.start.context-record/do!]
          [clojure.decl/assoc* :ctx/schema (malli.core/schema [:map {:closed true}
                                                               [:ctx/audio :some]
                                                               [:ctx/editor :some]
                                                               [:ctx/db :some]
                                                               [:ctx/graphics :some]
                                                               [:ctx/input :some]
                                                               [:ctx/controls :some]
                                                               [:ctx/stage :some]
                                                               [:ctx/ui-actors :some]
                                                               [:ctx/world :some]
                                                               [:ctx/info :some]
                                                               [:ctx/schema :some]
                                                               [:ctx/mouseover-actor :any]
                                                               [:ctx/ui-mouse-position :some]
                                                               [:ctx/world-mouse-position :some]
                                                               [:ctx/interaction-state :some]])]
          [clojure.core/assoc :ctx/editor #edn/resource "editor.edn"]
          [clojure.core/assoc
           :ctx/mouseover-actor nil
           :ctx/ui-mouse-position true
           :ctx/world-mouse-position true
           :ctx/interaction-state true]
          [clojure.decl/assoc* :ctx/db (cdq.db/create {:schemas "schema.edn"
                                                       :properties "properties.edn"})]
          [clojure.core/assoc :ctx/info #edn/resource "info.edn"]
          [cdq.start.txs/do! #edn/resource "txs.edn"]
          [clojure.extends/ns-impls #edn/resource "extends.edn"]
          [clojure.extends/ns-impls #edn/resource "extends_gdx.edn"]
          [cdq.start.load-entity-components/do! #edn/resource "entity_components.edn"]
          [cdq.start.load-entity-states/do!     #edn/resource "entity_states.edn"]
          [cdq.start.load-effects/do!           #edn/resource "effects_fn_map.edn"]
          [clojure.core/assoc :ctx/controls {:zoom-in :minus
                                             :zoom-out :equals
                                             :unpause-once :p
                                             :unpause-continously :space}]
          [cdq.create.input/do!]
          [cdq.create.vis-ui/do! {:skin-scale :x1}]
          [cdq.create.graphics/do! #edn/resource "graphics.edn"]
          [cdq.create.stage/do!]
          [cdq.create.set-input-processor/do!]
          [cdq.create.audio/do! {:sound-names #edn/resource "sounds.edn"
                                 :path-format "sounds/%s.wav"}]
          [clojure.core/dissoc :ctx/gdx]
          [cdq.ui.menu/init! [[clojure.scene2d/build
                               :actor.type/actor
                               clojure.gdx.scene2d.actor/create]
                              [clojure.scene2d/build
                               :actor.type/widget
                               clojure.gdx.scene2d.actor/create-widget]
                              [clojure.scene2d/build
                               :actor.type/menu-bar
                               clojure.gdx.scene2d.actor.menu-bar/create]
                              [clojure.scene2d/build
                               :actor.type/select-box
                               clojure.vis-ui.select-box/create]
                              [clojure.scene2d/build
                               :actor.type/label
                               clojure.vis-ui.label/create]
                              [clojure.scene2d/build
                               :actor.type/text-field
                               clojure.vis-ui.text-field/create]
                              ]]
          [clojure.vis-ui.widget/load!]
          [clojure.core/assoc :ctx/ui-actors #edn/resource "ui_actors.edn"]
          [cdq.create.reset-stage/do!]
          [cdq.create.world-config/do!]
          [cdq.create.world/do! [cdq.world-fns.tmx/create {:tmx-file "maps/vampire.tmx"
                                                           :start-position [32 71]}]]]
 :render  [[cdq.render.validate/do!]
           [cdq.render.update-mouse/do!]
           [cdq.render.update-mouseover-eid/do!]
           [cdq.render.check-open-debug/do!]
           [cdq.render.assoc-active-entities/do!]
           [cdq.render.set-camera-on-player/do!]
           [cdq.render.clear-screen/do!]
           [cdq.render.draw-world-map/do!]
           [cdq.render.draw-on-world-viewport/do! [
                                                   cdq.draw-on-world-viewport.tile-grid/do!
                                                   cdq.draw-on-world-viewport.cell-debug/do!
                                                   cdq.draw-on-world-viewport.entities/do!
                                                   #_cdq.draw-on-world-viewport.geom-test/do!
                                                   cdq.draw-on-world-viewport.highlight-mouseover-tile/do!
                                                   ]]
           [cdq.render.assoc-interaction-state/do!]
           [cdq.render.set-cursor/do!]
           [cdq.render.player-state-handle-input/do!]
           [cdq.render.assoc-paused/do!]
           [cdq.render.update-time/do!]
           [cdq.render.update-potential-fields/do!]
           [cdq.render.tick-entities/do!]
           [cdq.render.remove-destroyed-entities/do!]
           [cdq.render.handle-key-input/do!]
           [cdq.render.validate/do!]]
 :dispose cdq.gdx-app.dispose/do!
 :resize  cdq.gdx-app.resize/do!
 }
