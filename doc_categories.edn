{:app [start-app! app-state]
 :ctx-screens [current-screen current-screen-key change-screen]
 :ctx-gui-view [gui-mouse-position gui-viewport-height gui-viewport-width]
 :ctx-world-view [world-camera world-mouse-position world-viewport-height world-viewport-width]
 :ctx-side-effects [ render-gui-view  render-world-view  effect!  play-sound!  set-cursor! error-window!]
 :ctx-properties [all-properties build-property ]
 :schema [def-type def-attributes]
 :camera [reset-zoom! set-zoom! calculate-zoom camera-position camera-set-position! zoom visible-tiles frustum]
 :component [component-attributes defcomponent defcomponent* defsystem defsystems]
 :graphics [pixels->world-units world-unit-scale with-shape-line-width draw-arc draw-centered-image draw-circle draw-ellipse draw-filled-circle draw-filled-ellipse draw-filled-rectangle draw-grid draw-image draw-item-on-cursor draw-line draw-rectangle draw-rotated-centered-image draw-sector draw-text]
 :entity [state-obj enemy-faction entity-stat entity-state entity-tile ->modified-value can-pickup-item?  direction collides?  friendly-faction]
 :geometry [v-add v-direction v-distance v-get-angle-from-vector v-get-normal-vectors v-length v-normalise v-normalised?  v-scale shape-collides?  circle->outer-rectangle point-in-rect?]
 :ctx-image [texture ->image sub-image sprite sprite-sheet]
 :ctx-time [stopped? reset logic-frame elapsed-time ->counter delta-time finished-ratio]
 :ctx-stage [stage-add! stage-get mouse-on-actor?]
 :ui-actor [set-center! set-id! set-name! set-position! set-touchable! set-visible! remove! parent visible? remove-tooltip! toggle-visible! actor-id actor-name add-tooltip!]
 :ui-widgets [->actor ->button-group ->check-box ->group ->horizontal-group ->horizontal-separator-cell ->image-button ->image-widget ->label ->scroll-pane ->scroll-pane-cell ->select-box ->split-pane ->stack ->stage ->table ->text-button ->text-field ->texture-region-drawable ->vertical-group ->vertical-separator-cell ->window]
 :ui [window-title-bar?  set-cell-opts set-table-opts pack-ancestor-window!  find-ancestor-window add-actor!  add-listener!  add-rows!  button?  children clear-children!]
 :utils [create-into ->info-text create-vs dispose val-max-ratio vimstuff WASD-movement-vector safe-get safe-merge srand srand-int sshuffle rand-float-between rand-int-between readable-number tile->middle create-seed ->tile when-chance find-first get-namespaces get-rand-weighted-item get-rand-weighted-items get-vars high-weighted high-weighted-rand-nth if-chance percent-chance]
 :world [rectangle->cells
         point->entities
         nearest-entity
         nearest-entity-distance
         occupied-by-other?
         blocked?
         blocks-vision?
         cached-adjacent-cells
         cells->entities
         circle->cells
         circle->entities
         player-entity
         player-entity*
         mouseover-entity*
         line-of-sight?
         ray-blocked?
         path-blocked?
         potential-fields-follow-to-enemy
         get-entity
         all-entities
         active-entities]
 }
