*** even add-methods /// add-method should be public somewhere !!!
( or not?! )



-> clicked-cell private of item in hand -> so goes to inventory!?

modifiers
inventory
=> namespaces with the data only w./o entities

etc.

also render is separate from other entity-fns
can move together again?

can call the components?!

=> context-free stuff
=> SRP => actually lifecycle/state separate means? SRP ? why screens lifecycle keeps state?

=> also state/cursor and pause-game does not even need to be aprt of state logic ... and render also not .... purely model ...

=> e.g. draw-skill-image or draw-hp-bar can be moved to 'forge.graphics' ??? idk

e.g. skil-usable-state to skills
effect-ctx to effects?

even
in gdx.input


(def ^:private k->input-button (partial static-field "Input$Buttons"))
(def ^:private k->input-key    (partial static-field "Input$Keys"))


evil is private!

deeper folders call into lowers ones

lower folders never call into upper ones


=> e.g. npc-sleeping
draw zzz
forge.entity.state.npc-sleeping

(let [[x y] (:position entity)]
 (draw-text {:text "zzz"
  :x x
  :y (+ y (:half-height entity))
  :up? true}))
=> move into graphics!
crazyyyy

even timer -> private fns where I pass 'elapsed-time' first

also! :

effects no but effect
because these are effect-components
so effect & component ...


=>>> lower folders call into higher folders not other way around ...

e.g. app.screens.world.render ? or app.screens.world.update ?

e.g.

(ns forge.app.cursors
  (:require [clojure.gdx.files :as files]
            [clojure.gdx.graphics :as g]
            [clojure.gdx.utils.disposable :refer [dispose]]
            [clojure.utils :refer [bind-root safe-get mapvals]]))

(defn- gdx-cursor [[file [hotspot-x hotspot-y]]]
  (let [pixmap (g/pixmap (files/internal (str "cursors/" file ".png")))
        cursor (g/cursor pixmap hotspot-x hotspot-y)]
    (dispose pixmap)
    cursor))

(declare ^:private cursors)

(defn create [[_ data]]
  (bind-root cursors (mapvals gdx-cursor data)))

(defn destroy [_]
  (run! dispose (vals cursors)))

(defn set-cursor [cursor-key]
  (g/set-cursor (safe-get cursors cursor-key)))

=> gdx-cursor can be a public function in clojure.gdx.graphics !!!!

Also can I use 'def' instead of bind-root ? do taggings or private stting go missing?

nothing should be private!
what about database internal data?
just holding data/lifecycle
=> forge.db accesses that ?
=> context-free DB lib? passed {:file :schemas :foobar } ?


=> Also entity render stuff should probably go together

its all forge.screens.world.render ?

in 1 line all stuff rendering of theg ame ...

also - can I just use 'def' instead of 'bind-root' does it lose private tagging?
anyway don't make private stuff.... e.g. shout-range ... upfactor...

e.g. forge.schema with malli/edn->value/etc. no need to be in db
why anyway 'app/db' ?
only initialising state

context-free db namespace make too

that counts also for issues and comments/TODOs ...

also write on a wallpaper the line

'dev.loop' -> 'start' -> 'screens' ?

Also write small tests

e.g. delete-after-duration?

which I can click through the stuff ...

I need overview of stuff ...
screens -> widgets

data/entity

tree view ing ame ?
