
; BUG e.g. stuff is not deleted after death ..


; OK here is the bug ....
; should have made me know
; => entity schema !
; => prevent that 'class' of bugs ...

; * can't get mouseover id
; * delete-after-animation-stopped? is installed (keys (methods forge.entity/tick))

; type the question mark was missing ...




; TESTS!
; like a tool with a list which starts a world for tests to do certain things .... ?
; like gdx test runner ?
; shows of effects on custom built maps !?


; for app ... only install those I use ?!
; install also schemas / entity-state/widgets/fsms?!

            ; Install this shit now !!
            ; Also for screens/schemas/mapgen ?
            ; => remove all the stupid dependencies....

            ; and then defsystem does not need params
            ; and can make 'component' API multimethods
            ; and no Screen protocol
            ; e.g. re-use enter/exit ....
            ; and work on components

            ; maybe even 'clojure.component' or 'forge.component' ?
            ; but then they also want to have names
            ; e.g. create/destroy ok
            ; but enter exit ?
            ; hmmm

            ; can also think about having an API for 'effects' ?

            ; I am wondering... effects are the last line of defense
            ; could we put something behind 'effects'?
            ; how would it look ?

            ; also I can build cursors in the db ?

            ; and fsms/widgests can make 'component/create' ??? or is that crazy
            ; or we call the component directly w. create

            ; but then we could also have an API for 'send-event' or something?
            ; entity API

            ; we could have .... ?

            ; but I like explicit dependencies

            ; so where is the problem in our app ?

            ; biggest file ?

            ; -editor/world-

            ; keep making things smaller and moving data out and more explicit

            ; e.g. vampire hardcoded

            ; at what point is what important?
            ; overview ?

            ; how is all _really_ connected?

            ; what parts are there?

            ; where is)the overview(

            ; ===> ! MAPGEN! <==== (move stuff to grid2d? clojure.g2d ? => no private!

            ; minimal small parts -> no private stuff !
            ; start with size
            ; e.g. fsm/create ... or just depend ?
            ; create is a system ...
            ; everything is a system
            ; send-event is a system ... / protocol
            ; ....
            ; maybe we will get an entity or graphics 'API'
            ; e.g. line-of-sight is a component does not be together with other stuff
            ; only private to itself stuff ....

            ; what are my components ... minimal context minimal components ....
            ; => where are the problems easier to see (spiderweb hardcoded stuff etc. ,
            ; potential field follow & work ...)



